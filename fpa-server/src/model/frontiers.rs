//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::Serialize;
use utoipa::ToSchema;

/// Project's Frontier.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, ToSchema)]
#[sea_orm(table_name = "frontiers")]
#[schema(as=Module)]
#[serde(rename = "Frontier")]
pub struct Model {
    /// Frontier Unique Identifier.
    #[sea_orm(primary_key, auto_increment = false)]
    pub frontier: Uuid,
    /// Project owner of the Frontier.
    #[serde(skip)]
    pub project: Uuid,
    /// Tenant owner of the Project.
    #[serde(skip)]
    pub tenant: Uuid,
    /// Frontier's name.
    pub name: String,
    /// Description for the Frontier.
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::functions::Entity")]
    Functions,
    #[sea_orm(has_many = "super::functions_datas::Entity")]
    FunctionsDatas,
    #[sea_orm(has_many = "super::functions_transactions::Entity")]
    FunctionsTransactions,
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::Project",
        to = "super::projects::Column::Project",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Projects,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
}

impl Related<super::functions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Functions.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
