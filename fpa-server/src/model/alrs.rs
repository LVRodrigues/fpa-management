//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "alrs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub function: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub alr: Uuid,
    pub tenant: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::functions_transactions::Entity",
        from = "Column::Function",
        to = "super::functions_transactions::Column::Function",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FunctionsTransactions,
    #[sea_orm(
        belongs_to = "super::functions_datas::Entity",
        from = "Column::Alr",
        to = "super::functions_datas::Column::Function",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FunctionsDatas,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
}

impl Related<super::functions_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FunctionsTransactions.def()
    }
}

impl Related<super::functions_datas::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FunctionsDatas.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
