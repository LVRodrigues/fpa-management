//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use super::sea_orm_active_enums::FunctionType;
use serde::Serialize;
use utoipa::{schema, ToSchema};
use sea_orm::entity::prelude::*;

/// Function for analisis.
#[derive(Clone, Debug, PartialEq, Serialize, ToSchema, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "functions")]
#[schema(as=Function)]
#[serde(rename = "Function")] 
pub struct Model {
    /// Function unique Identifier.
    #[sea_orm(primary_key, auto_increment = false)]
    pub function: Uuid,
    #[serde(skip)]
    pub module: Uuid,
    #[serde(skip)]
    pub tenant: Uuid,
    /// Function Type
    pub r#type: FunctionType,
    /// Name for the Function.
    pub name: String,
    /// Description for the Function.
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::modules::Entity",
        from = "Column::Module",
        to = "super::modules::Column::Module",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Modules,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
}

impl Related<super::modules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Modules.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
