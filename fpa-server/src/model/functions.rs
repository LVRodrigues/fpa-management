//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use super::{functions_datas, functions_transactions, sea_orm_active_enums::FunctionType};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "functions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub function: Uuid,
    pub frontier: Uuid,
    pub tenant: Uuid,
    pub r#type: FunctionType,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::frontiers::Entity",
        from = "Column::Frontier",
        to = "super::frontiers::Column::Frontier",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Frontiers,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
}

impl Related<super::frontiers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Frontiers.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Into<Model> for functions_datas::Model {
    fn into(self) -> Model {
        Model {
            function: self.function,
            frontier: self.frontier,
            tenant: self.tenant,
            name: self.name,
            description: self.description,
            r#type: self.r#type,
        }
    }
}

impl Into<Model> for functions_transactions::Model {
    fn into(self) -> Model {
        Model {
            function: self.function,
            frontier: self.frontier,
            tenant: self.tenant,
            name: self.name,
            description: self.description,
            r#type: self.r#type,
        }
    }
}
