//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde_derive::Serialize;
use utoipa::{schema, ToSchema};

/// Project for analysis.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, ToSchema)]
#[sea_orm(table_name = "projects")]
#[schema(as=Project)]
#[serde(rename = "Project")] 
pub struct Model {
    /// Project unique identifier.
    #[sea_orm(primary_key, auto_increment = false)]
    pub project: Uuid,
    /// Tenant owner of the Project.
    #[serde(skip)]
    pub tenant: Uuid,
    /// Project name.
    pub name: String,
    /// Project description.
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    /// Project creation date and time.
    #[schema(value_type = String, format = DateTime)]
    pub time: DateTimeWithTimeZone,
    /// User owner of the Project.
    pub user: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::empiricals::Entity")]
    Empiricals,
    #[sea_orm(has_many = "super::factors::Entity")]
    Factors,
    #[sea_orm(has_many = "super::modules::Entity")]
    Modules,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::User",
        to = "super::users::Column::User",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::empiricals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Empiricals.def()
    }
}

impl Related<super::factors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Factors.def()
    }
}

impl Related<super::modules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Modules.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenants.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
