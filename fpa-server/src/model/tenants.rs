//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tenants")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub tenant: Uuid,
    pub name: String,
    pub time: DateTimeWithTimeZone,
    pub status: i32,
    pub tier: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alrs::Entity")]
    Alrs,
    #[sea_orm(has_many = "super::functions::Entity")]
    Functions,
    #[sea_orm(has_many = "super::modules::Entity")]
    Modules,
    #[sea_orm(has_many = "super::projects::Entity")]
    Projects,
    #[sea_orm(has_many = "super::projects_empiricals::Entity")]
    ProjectsEmpiricals,
    #[sea_orm(has_many = "super::projects_factors::Entity")]
    ProjectsFactors,
    #[sea_orm(has_many = "super::rlrs::Entity")]
    Rlrs,
    #[sea_orm(
        belongs_to = "super::tenants_status::Entity",
        from = "Column::Status",
        to = "super::tenants_status::Column::Status",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TenantsStatus,
    #[sea_orm(
        belongs_to = "super::tenants_tier::Entity",
        from = "Column::Tier",
        to = "super::tenants_tier::Column::Tier",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TenantsTier,
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
}

impl Related<super::alrs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alrs.def()
    }
}

impl Related<super::functions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Functions.def()
    }
}

impl Related<super::modules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Modules.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::projects_empiricals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectsEmpiricals.def()
    }
}

impl Related<super::projects_factors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectsFactors.def()
    }
}

impl Related<super::rlrs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rlrs.def()
    }
}

impl Related<super::tenants_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TenantsStatus.def()
    }
}

impl Related<super::tenants_tier::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TenantsTier.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
