//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::TenantStatus;
use super::sea_orm_active_enums::TenantTier;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tenants")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub tenant: Uuid,
    pub name: String,
    pub time: DateTimeWithTimeZone,
    pub status: TenantStatus,
    pub tier: TenantTier,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alrs::Entity")]
    Alrs,
    #[sea_orm(has_many = "super::empiricals::Entity")]
    Empiricals,
    #[sea_orm(has_many = "super::factors::Entity")]
    Factors,
    #[sea_orm(has_many = "super::functions::Entity")]
    Functions,
    #[sea_orm(has_many = "super::modules::Entity")]
    Modules,
    #[sea_orm(has_many = "super::projects::Entity")]
    Projects,
    #[sea_orm(has_many = "super::rlrs::Entity")]
    Rlrs,
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
}

impl Related<super::alrs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alrs.def()
    }
}

impl Related<super::empiricals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Empiricals.def()
    }
}

impl Related<super::factors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Factors.def()
    }
}

impl Related<super::functions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Functions.def()
    }
}

impl Related<super::modules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Modules.def()
    }
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::rlrs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rlrs.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
