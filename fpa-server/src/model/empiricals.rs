//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::EmpiricalType;
use serde_derive::Serialize;
use sea_orm::entity::prelude::*;
use utoipa::ToSchema;

/// Empirical Adjusts Factors for the Project.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, ToSchema)]
#[sea_orm(table_name = "empiricals")]
#[schema(as=Empirical)]
#[serde(rename = "Empirical")] 
pub struct Model {
    /// Project Unique Identifier.
    #[serde(skip)]
    #[sea_orm(primary_key, auto_increment = false)]
    pub project: Uuid,
    /// Empirical`s Factor
    #[sea_orm(primary_key, auto_increment = false)]
    pub empirical: EmpiricalType,
    /// Tenant owner of the Project.
    #[serde(skip)]
    pub tenant: Uuid,
    /// Percent of influence for the Empirical`s Factor.
    pub value: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::projects::Entity",
        from = "Column::Project",
        to = "super::projects::Column::Project",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Projects,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
}

impl Related<super::projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Projects.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenants.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
