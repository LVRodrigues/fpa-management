//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ders")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub function: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub rlr: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub tenant: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rlrs::Entity",
        from = "(Column::Function, Column::Rlr)",
        to = "(super::rlrs::Column::Function, super::rlrs::Column::Name)",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Rlrs,
    #[sea_orm(
        belongs_to = "super::tenants::Entity",
        from = "Column::Tenant",
        to = "super::tenants::Column::Tenant",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenants,
}

impl Related<super::rlrs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rlrs.def()
    }
}

impl Related<super::tenants::Entity> for Entity {
    fn to() -> RelationDef {
        super::rlrs::Relation::Tenants.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::rlrs::Relation::Ders.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
